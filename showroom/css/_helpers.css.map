{"version":3,"sources":["_helpers.css","<no source>"],"names":[],"mappings":"AAAA;;;;;8EAK8E;AAC9E,gFAAgF;;AAEhF;CACC,yBAAyB;CACzB,8BAA8B;CAC9B,sBAAsB;CACtB;;AAED;;;;;yDAKyD;;ACnBzD;EDsBC,YAAY;EACZ,4BAAiC;EACjC,6BAAiC;EACjC,eAAe;EAGd,qBAA4B;EAC3B,sBAA6B;EAG/B;;;;;;;;;;;;;;;;IAgBG;CChDJ;;AD2DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0DG","file":"_helpers.css","sourcesContent":["/* NGN Chassis PostCSS \n * Helper Classes \n\n * These classes can be injected with javascript \n\n * Add !important to rules that absolutely must overwrite any other styles. */\n/*----------------------------------------------------------------------------*/\n\n.hidden {\n\tdisplay: none !important;\n\tvisibility: hidden !important;\n\topacity: 0 !important;\n}\n\n/* Limit width of a container to the min and max UI widths\n * <div class=\"width-constraint\"> should be placed inside elements that span the\n * full width of the viewport to maintain proper UI dimensions\n\n * For  elements that need to be constrained to the max UI width\n * (e.g. inner containers on top-level elements, etc.) */\n \n@define-mixin width-constraint $min-width: getUiMinWidth(), $max-width: getUiMaxWidth(), $has-padding: true {\n\twidth: 100%;\n\tmin-width: $min-width !important;\n\tmax-width: $max-width !important;\n\tmargin: 0 auto;\n\t\n\t@if $has-padding == true {\n\t\tpadding-left: getUiGutter();\n\t  padding-right: getUiGutter();\n\t}\n\t\n\t/*@media screen and (max-width: $min-width) {\n\t\t@if unit($min-width) != 'rem' {\n\t\t\t@if unit($min-width) == 'px' {\n\t\t\t\tpadding: {\n\t\t\t\t\tleft: round((strip-units($min-width) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\t\tright: round((strip-units($min-width) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\t}\n\t\t\t} @else {\n\t\t\t\t@warn '#{unit($min-width)} cannot be used as a unit for $ui-min-width. Please use rem or px instead.';\n\t\t\t}\n\t\t} @else {\n\t\t\tpadding: {\n\t\t\t\tleft: round(((strip-units($min-width) * strip-units($typography-base)) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\tright: round(((strip-units($min-width) * strip-units($typography-base)) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t}\n\t\t}\n\t}*/\n}\n\n@define-extend width-constraint {\n  @mixin width-constraint;\n}\n\n.width-constraint {\n\t@extend width-constraint;\n}\n \n/*@mixin width-constraint($min-width: $ui-min-width, $max-width: $ui-max-width, $has-padding: true) {\n\twidth: 100%;\n\tmin-width: $min-width !important;\n\tmax-width: $max-width !important;\n\tmargin: 0 auto;\n\n\t@if $has-padding {\n\t\tpadding: {\n\t    left: $ui-gutter;\n\t    right: $ui-gutter;\n\t  }\n\n\t\t// Prevent vw padding from shrinking at viewport widths below minimum ui width\n\t\t@media screen and (max-width: $min-width) {\n\t\t\t@if unit($min-width) != 'rem' {\n\t      @if unit($min-width) == 'px' {\n\t\t\t\t\tpadding: {\n\t\t\t\t\t\tleft: round((strip-units($min-width) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\t\t\tright: round((strip-units($min-width) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\t  }\n\t      } @else {\n\t        @warn '#{unit($min-width)} cannot be used as a unit for $ui-min-width. Please use rem or px instead.';\n\t      }\n\t    } @else {\n\t\t\t\tpadding: {\n\t\t\t\t\tleft: round(((strip-units($min-width) * strip-units($typography-base)) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\t\tright: round(((strip-units($min-width) * strip-units($typography-base)) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t  }\n\t\t\t}\n\t\t}\n\n\t\t// Prevent vw padding from enlarging at viewport widths above maximum ui width\n\t\t@media screen and (min-width: $max-width) {\n\t\t\t@if unit($max-width) != 'rem' {\n\t      @if unit($max-width) == 'px' {\n\t\t\t\t\tpadding: {\n\t\t\t\t\t\tleft: round((strip-units($max-width) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\t\t\tright: round((strip-units($max-width) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\t  }\n\t      } @else {\n\t        @warn '#{unit($max-width)} cannot be used as a unit for $ui-max-width. Please use rem or px instead.';\n\t      }\n\t    } @else {\n\t\t\t\tpadding: {\n\t\t\t\t\tleft: round(((strip-units($max-width) * strip-units($typography-base)) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\t\tright: round(((strip-units($max-width) * strip-units($typography-base)) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t  }\n\t\t\t}\n\t\t}\n\t}\n}\n\n%width-constraint {\n\t@include width-constraint;\n}\n\n.width-constraint {\n\t@extend %width-constraint;\n}*/\n",null],"sourceRoot":"/source/"}