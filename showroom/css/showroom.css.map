{"version":3,"sources":["constants/_colors.css","config/_layout.css","_reset.css","_helpers.css","<no source>","_chassis.css","showroom.css"],"names":[],"mappings":"AAAA;;gFAEgF;;AAEhF;CAQC;wEACuE;CAEvE,kBAAkB;CACgB,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CAE/C,qBAAqB;CACa,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CAE/C,mBAAmB;CACe,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CACb,aAAa;CAE/C;ACtDD;;gFAEgF;ACFhF;gFACgF;;AAEhF;CAAuB,sBAAuB;CAAE;;AAEhD;CAOC,UAAU;CACV,WAAW;CACX,UAAU;CACV,cAAc;CACd,gBAAgB;CAChB,wBAAyB;CACzB;;AAED;CAEC,gBAAiB;CACjB;;AAED;CAEE,YAAa;CAOd;;AALC;CAEE,YAAY;CACb,aAAc;CACd;;AAGH;CACC,YAAa;CACb;AAED;sDACsD;;AACtD;CAaC,cAAe;CACf;;AAED;CAGE,kBAAmB;CACpB;AC9DD;;;;;8EAK8E;AAC9E,gFAAgF;;AAEhF;CACC,yBAAyB;CACzB,8BAA8B;CAC9B,qBAAsB;CACtB;AAED;;;;;yDAKyD;;ACnBzD;CDsBC,YAAY;CACZ,uBAAiC;CACjC,uBAAiC;CACjC,eAAe;CAGd,qBAAyB;CACxB,qBAA0B;CAG5B;;;;;;;;;;;;;;;;IAgBG;CChDJ;AD2DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0DG;;AE9GH,WAIC;;ACTD;CACC,6BAA6B;CAC7B,uBAAwB;CAOxB;;AALA;CACC,8BAA8B;CAE5B,4CAAyC;CAC3C","file":"showroom.css","sourcesContent":["/* NGN Chassis PostCSS\n\n/* Color Definitions ---------------------------------------------------------*/\n\n:root {\n\t--white : rgba(255,255,255,1);\n\t--black : rgba(0,0,0,1);\n\n\t--red   : red;\n\t--green : rgba(104,187,18,1);\n\t--blue  : rgba(0,152,230,1);\n\n\t/* Copic Greys\n\t * Grey Scale: lightest (00) to darkest (10) in one-shade increments */\n\n\t/* :: Cool Grey */\n\t--grey-c00 : rgba(232,240,243,1); /* #EDEDED */\n\t--grey-c01 : rgba(225,233,236,1); /* #EAEAEA */\n\t--grey-c02 : rgba(218,227,232,1); /* #E1E1DF */\n\t--grey-c03 : rgba(204,215,221,1); /* #D3D4CF */\n\t--grey-c04 : rgba(192,203,209,1); /* #BCBBB9 */\n\t--grey-c05 : rgba(146,160,169,1); /* #A8A7A3 */\n\t--grey-c06 : rgba(125,139,150,1); /* #939391 */\n\t--grey-c07 : rgba(99,112,121,1);  /* #777674 */\n\t--grey-c08 : rgba(83,93,103,1);   /* #636361 */\n\t--grey-c09 : rgba(60,71,77,1);    /* #4c4b49 */\n\t--grey-c10 : rgba(33,42,49,1);    /* #332F2E */\n\n\t/* :: Neutral Grey */\n\t--grey-n00 : rgba(237,237,237,1); /* #EEEEEE */\n\t--grey-n01 : rgba(226,227,229,1); /* #E2E3E5 */\n\t--grey-n02 : rgba(218,219,221,1); /* #DADBDD */\n\t--grey-n03 : rgba(209,210,212,1); /* #D1D2D4 */\n\t--grey-n04 : rgba(188,189,193,1); /* #BCBDC1 */\n\t--grey-n05 : rgba(169,170,174,1); /* #A9AAAE */\n\t--grey-n06 : rgba(148,149,153,1); /* #949599 */\n\t--grey-n07 : rgba(119,120,124,1); /* #77787C */\n\t--grey-n08 : rgba(99,100,102,1);  /* #636466 */\n\t--grey-n09 : rgba(76,77,79,1);    /* #4C4D4F */\n\t--grey-n10 : rgba(44,45,48,1);    /* #312F32 */\n\n\t/* :: Toner Grey */\n\t--grey-t00 : rgba(237,237,237,1); /* #E8F0F3 */\n\t--grey-t01 : rgba(234,234,234,1); /* #E1E9EC */\n\t--grey-t02 : rgba(225,225,223,1); /* #DAE3E8 */\n\t--grey-t03 : rgba(211,212,207,1); /* #CCD7DD */\n\t--grey-t04 : rgba(188,187,185,1); /* #C0CBD1 */\n\t--grey-t05 : rgba(168,167,163,1); /* #92A0A9 */\n\t--grey-t06 : rgba(147,147,145,1); /* #7D8B96 */\n\t--grey-t07 : rgba(117,118,119,1); /* #637079 */\n\t--grey-t08 : rgba(99,99,97,1);    /* #535D67 */\n\t--grey-t09 : rgba(76,75,73,1);    /* #3C474D */\n\t--grey-t10 : rgba(51,47,46,1);    /* #212A31 */\n\n}\n\n","/* NGN Chassis PostCSS\n * Layout Defaults\n * ---------------------------------------------------------------------------*/\n\n$ui-gutter : 6.18vw;\n\n$default-border-radius : .240625em;","/* NGN Chassis PostCSS\n * Browser Reset -------------------------------------------------------------*/\n\n*, *:before, *:after { box-sizing: border-box; }\n\nhtml, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p,\nblockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img,\nins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center,\n dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody,\ntfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure,\nfigcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont: inherit;\n\tfont-size: 100%;\n\tvertical-align: baseline;\n}\n\nol,\nul {\n\tlist-style: none;\n}\n\nq,\nblockquote {\n  quotes: none;\n\n  &:before,\n  &:after {\n    content: \"\";\n  \tcontent: none;\n  }\n}\n\na img {\n\tborder: none;\n}\n\n/* For IE and Opera Mini\n * Set default box model on HTML5 semantic elements */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n\tdisplay: block;\n}\n\ninput,\ntextarea,\nbutton {\n  font-size: inherit;\n}\n","/* NGN Chassis PostCSS \n * Helper Classes \n\n * These classes can be injected with javascript \n\n * Add !important to rules that absolutely must overwrite any other styles. */\n/*----------------------------------------------------------------------------*/\n\n.hidden {\n\tdisplay: none !important;\n\tvisibility: hidden !important;\n\topacity: 0 !important;\n}\n\n/* Limit width of a container to the min and max UI widths\n * <div class=\"width-constraint\"> should be placed inside elements that span the\n * full width of the viewport to maintain proper UI dimensions\n\n * For  elements that need to be constrained to the max UI width\n * (e.g. inner containers on top-level elements, etc.) */\n \n@define-mixin width-constraint $min-width: getMinViewportBound(), $max-width: getMaxViewportBound(), $has-padding: true {\n\twidth: 100%;\n\tmin-width: $min-width !important;\n\tmax-width: $max-width !important;\n\tmargin: 0 auto;\n\t\n\t@if $has-padding == true {\n\t\tpadding-left: $ui-gutter;\n\t  padding-right: $ui-gutter;\n\t}\n\t\n\t/*@media screen and (max-width: $min-width) {\n\t\t@if unit($min-width) != 'rem' {\n\t\t\t@if unit($min-width) == 'px' {\n\t\t\t\tpadding: {\n\t\t\t\t\tleft: round((strip-units($min-width) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\t\tright: round((strip-units($min-width) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\t}\n\t\t\t} @else {\n\t\t\t\t@warn '#{unit($min-width)} cannot be used as a unit for $ui-min-width. Please use rem or px instead.';\n\t\t\t}\n\t\t} @else {\n\t\t\tpadding: {\n\t\t\t\tleft: round(((strip-units($min-width) * strip-units($typography-base)) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\tright: round(((strip-units($min-width) * strip-units($typography-base)) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t}\n\t\t}\n\t}*/\n}\n\n@define-extend width-constraint {\n  @mixin width-constraint;\n}\n\n.width-constraint {\n\t@extend width-constraint;\n}\n \n/*@mixin width-constraint($min-width: $ui-min-width, $max-width: $ui-max-width, $has-padding: true) {\n\twidth: 100%;\n\tmin-width: $min-width !important;\n\tmax-width: $max-width !important;\n\tmargin: 0 auto;\n\n\t@if $has-padding {\n\t\tpadding: {\n\t    left: $ui-gutter;\n\t    right: $ui-gutter;\n\t  }\n\n\t\t// Prevent vw padding from shrinking at viewport widths below minimum ui width\n\t\t@media screen and (max-width: $min-width) {\n\t\t\t@if unit($min-width) != 'rem' {\n\t      @if unit($min-width) == 'px' {\n\t\t\t\t\tpadding: {\n\t\t\t\t\t\tleft: round((strip-units($min-width) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\t\t\tright: round((strip-units($min-width) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\t  }\n\t      } @else {\n\t        @warn '#{unit($min-width)} cannot be used as a unit for $ui-min-width. Please use rem or px instead.';\n\t      }\n\t    } @else {\n\t\t\t\tpadding: {\n\t\t\t\t\tleft: round(((strip-units($min-width) * strip-units($typography-base)) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\t\tright: round(((strip-units($min-width) * strip-units($typography-base)) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t  }\n\t\t\t}\n\t\t}\n\n\t\t// Prevent vw padding from enlarging at viewport widths above maximum ui width\n\t\t@media screen and (min-width: $max-width) {\n\t\t\t@if unit($max-width) != 'rem' {\n\t      @if unit($max-width) == 'px' {\n\t\t\t\t\tpadding: {\n\t\t\t\t\t\tleft: round((strip-units($max-width) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\t\t\tright: round((strip-units($max-width) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\t  }\n\t      } @else {\n\t        @warn '#{unit($max-width)} cannot be used as a unit for $ui-max-width. Please use rem or px instead.';\n\t      }\n\t    } @else {\n\t\t\t\tpadding: {\n\t\t\t\t\tleft: round(((strip-units($max-width) * strip-units($typography-base)) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t\t\tright: round(((strip-units($max-width) * strip-units($typography-base)) * (strip-units($ui-gutter) / 100)) * 1px);\n\t\t\t  }\n\t\t\t}\n\t\t}\n\t}\n}\n\n%width-constraint {\n\t@include width-constraint;\n}\n\n.width-constraint {\n\t@extend %width-constraint;\n}*/\n",null,"@import 'constants/colors';\n\n@import 'config/layout';\n\n@import 'reset';\n@import 'helpers';\n\n.chassis {\n\t\n\t\n\t\n}","@import 'chassis';\n\n.showroom {\n\t/*Account for sticky footer*/\n\tpadding-bottom: 3.618em;\n\t\n\t& > header {\n\t\tpadding: 1.46em 0 .90169942em;\n\n    border-bottom: 4px solid var(--grey-n00);\n\t}\n}"],"sourceRoot":"/source/"}