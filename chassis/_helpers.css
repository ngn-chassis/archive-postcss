/* NGN Chassis PostCSS
 * Helper Classes

 * These classes can be injected with javascript

 * Add !important to rules that absolutely must overwrite any other styles. */
/*----------------------------------------------------------------------------*/

.hidden {
	display: none !important;
	visibility: hidden !important;
	opacity: 0 !important;
}

/* Limit width of a container to the min and max UI widths
 * <div class="width-constraint"> should be placed inside elements that span the
 * full width of the viewport to maintain proper UI dimensions

 * For  elements that need to be constrained to the max UI width
 * (e.g. inner containers on top-level elements, etc.) */

@define-mixin width-constraint $min-width: getLayoutMinWidth(), $max-width: getLayoutMaxWidth(), $has-padding: true {
	$gutter: getLayoutGutter();

	width: 100%;
	min-width: $min-width !important;
	max-width: $max-width !important;
	margin: 0 auto;

	@if $has-padding == true {
		padding-left: $gutter;
	  padding-right: $gutter;
	}

	@media screen and (max-width: $min-width) {
		padding-left: calc((strip($min-width) * (strip($gutter) / 100)) * 1px);
		padding-right: calc((strip($min-width) * (strip($gutter) / 100)) * 1px);
	}

	@media screen and (min-width: $max-width) {
		padding-left: calc((strip($max-width) * (strip($gutter) / 100)) * 1px);
		padding-right: calc((strip($max-width) * (strip($gutter) / 100)) * 1px);
	}
}

.width-constraint {
	@mixin width-constraint;
}
